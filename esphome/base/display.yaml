output:
  - platform: gpio
    id: "A"
    pin:
      sn74hc595: output_hub
      number: 0
      inverted: false
  - platform: gpio
    id: "B"
    pin:
      sn74hc595: output_hub
      number: 1
      inverted: false
  - platform: gpio
    id: "C"
    pin:
      sn74hc595: output_hub
      number: 2
      inverted: false
  - platform: gpio
    id: "D"
    pin:
      sn74hc595: output_hub
      number: 3
      inverted: false
  - platform: gpio
    id: "E"
    pin:
      sn74hc595: output_hub
      number: 4
      inverted: false
  - platform: gpio
    id: "F"
    pin:
      sn74hc595: output_hub
      number: 5
      inverted: false
  - platform: gpio
    id: "G"
    pin:
      sn74hc595: output_hub
      number: 6
      inverted: false
  - platform: gpio
    id: "DP"
    pin:
      sn74hc595: output_hub
      number: 7
      inverted: false
  - platform: gpio
    id: "G1"
    pin:
      sn74hc595: output_hub
      number: 8
      inverted: True
  - platform: gpio
    id: "G2"
    pin:
      sn74hc595: output_hub
      number: 9
      inverted: True
  - platform: gpio
    id: "G3"
    pin:
      sn74hc595: output_hub
      number: 10
      inverted: True
  - platform: gpio
    id: "G4"
    pin:
      sn74hc595: output_hub
      number: 11
      inverted: True

#text_sensor:
#  - platform: homeassistant
#    name: "Text from Home Assistant"
#    id: home_assistant_text
#    entity_id: input_text.test
interval:
  - interval: 20ms
    then:
      - script.execute: display_text

script:
  - id: display_text
    then:
      - lambda: |-
          std::string text = "test"; //id(home_assistant_text).state;

          // Pad with spaces if the text is shorter than 4 characters
          while (text.length() < 4) {
            text = " " + text;
          }

          auto clear_display = [&]() {
            id(G1).set_state(0);
            id(G2).set_state(0);
            id(G3).set_state(0);
            id(G4).set_state(0);
            id(DP).set_state(0);
            id(A).set_state(0);
            id(B).set_state(0);
            id(C).set_state(0);
            id(D).set_state(0);
            id(E).set_state(0);
            id(F).set_state(0);
            id(G).set_state(0);
          };

          // Character to segment map
          const uint8_t char_map[95] = {
            0b00000000, 0b10110000, 0b00100010, 0b00000000, 0b00000000, 0b01001001, 0b00000000, 0b00000010,
            0b01001110, 0b01111000, 0b01000000, 0b00000000, 0b00010000, 0b00000001, 0b10000000, 0b00000000,
            0b01111110, 0b00110000, 0b01101101, 0b01111001, 0b00110011, 0b01011011, 0b01011111, 0b01110000,
            0b01111111, 0b01111011, 0b01001000, 0b01011000, 0b00000000, 0b00001001, 0b00000000, 0b01100101,
            0b01101111, 0b01110111, 0b00011111, 0b01001110, 0b00111101, 0b01001111, 0b01000111, 0b01011110,
            0b00110111, 0b00110000, 0b00111100, 0b00000000, 0b00001110, 0b00000000, 0b00010101, 0b01111110,
            0b01100111, 0b11111110, 0b00000101, 0b01011011, 0b00000111, 0b00111110, 0b00111110, 0b00111111,
            0b00000000, 0b00100111, 0b01101101, 0b01001110, 0b00000000, 0b01111000, 0b00000000, 0b00001000,
            0b00100000, 0b01110111, 0b00011111, 0b00001101, 0b00111101, 0b01001111, 0b01000111, 0b01011110,
            0b00010111, 0b00010000, 0b00111100, 0b00000000, 0b00001110, 0b00000000, 0b00010101, 0b00011101,
            0b01100111, 0b00000000, 0b00000101, 0b01011011, 0b00000111, 0b00011100, 0b00011100, 0b00000000,
            0b00000000, 0b00100111, 0b00000000, 0b00110001, 0b00000110, 0b00000111, 0b01100011
          };
          auto set_digit = [&](int digit, uint8_t ch, bool dot) {
            clear_display();
            id(G1).set_state(digit == 0);
            id(G2).set_state(digit == 1);
            id(G3).set_state(digit == 2);
            id(G4).set_state(digit == 3);

            uint8_t segments = char_map[ch];
            id(DP).set_state((segments & 0b10000000) || dot);
            id(A).set_state(segments & 0b01000000);
            id(B).set_state(segments & 0b00100000);
            id(C).set_state(segments & 0b00010000);
            id(D).set_state(segments & 0b00001000);
            id(E).set_state(segments & 0b00000100);
            id(F).set_state(segments & 0b00000010);
            id(G).set_state(segments & 0b00000001);
            delay(5);
          };

          int l = text.length();
          bool dot = false;
          uint8_t tmp = 0;

          // Iterate over each digit position (up to 4)
          for (int i = 0; i < 4; ++i) {
              if (text[i] == '.') {
                  set_digit(i, 0, true);
              } else {
                  if ((i + 1 < l) && (text[i + 1] == '.')) {
                      dot = true;
                      text.erase(i + 1, 1);
                      l = text.length();
                  } else {
                      dot = false;
                  }
                  tmp = text[i] < 32 ? 0 : text[i] - 32;
                  set_digit(i, tmp, dot);
              }
          }